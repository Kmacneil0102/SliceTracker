@startuml

package "SliceTrackerSteps" #DDDDDD {


  QTabWidget <|-- SliceTrackerTabWidget
  SliceTrackerStep <.. SliceTrackerTabWidget::steps: has [0..n]

  class SliceTrackerTabWidget {
    + session
    + __init__(session)
    # _createTabs()
    + onCurrentTabChanged(step)
  }

  ModuleWidgetMixin <|-- SliceTrackerStep
  StepBase <|-- SliceTrackerStep
  QWidget <|-- SliceTrackerStep

  abstract class StepBase {
    + MODULE_NAME = "SliceTracker"
    __
    + session
    + modulePath: string
    __
    + getModulePath(): string
    + getSetting(self, setting, moduleName=None, default=None)
    + setSetting(self, setting, value, moduleName=None)
  }

  abstract class SliceTrackerStep {
    + {abstract} NAME: string
    + {abstract} LogicClass: SliceTrackerStepLogic
    .. events ..
    ActivatedEvent: vtk.vtkCommand.UserEvent
    DeactivatedEvent: vtk.vtkCommand.UserEvent
    .. properties ..
    + active: bool
    .. abstract methods ..
    + {abstract} setup()
    + {abstract} cleanup()
    + {abstract} setupConnections()
    + {abstract} onLayoutChanged()
    __
    + setupSliceWidgets()
    + setupAdditionalViewSettingButtons()
    + resetViewSettingButtons()
    + onActivation()
    + onDeactivation()
    + setupSessionObservers()
    + removeSessionEventObservers()
    .. slots ..
    + onNewCaseStarted()
    + onCaseClosed()
    + onIncomingDataSkipped()
    + onNewImageDataReceived()
    + onCoverTemplateReceived()
    + onZFrameRegistrationSuccessful()
  }

  abstract class SliceTrackerStepLogic {
    + resourcesPath
    + scalarVolumePlugin
    + volumesLogic
    .. abstract methods ..
    + {abstract} cleanup()
    __
    + getOrCreateVolumeForSeries(series)
  }

  StepBase <|-- SliceTrackerStepLogic
  ModuleLogicMixin <|-- SliceTrackerStepLogic

  class SliceTrackerOverviewStep {
    + onLayoutChanged()
    + trainingsWidget
  }

  class SliceTrackerTrainingStep {
  }

  SliceTrackerTrainingStep <.. SliceTrackerOverviewStep::traningsWidget


  class SliceTrackerSegmentationStep {
    + onLayoutChanged()
  }

  class SliceTrackerZFrameRegistrationStep {
    + onLayoutChanged()
  }

  class SliceTrackerEvaluationStep {
    + onLayoutChanged()
  }


  'SliceTrackerSession "0" --> "*" SliceTrackerStep

  'class OverViewStepLogic
  'class SegmentationStepLogic
  'class ZFrameRegistrationStepLogic
  'class EvaluationStepLogic
  '
  SliceTrackerStepLogic <|-- OverViewStepLogic
  SliceTrackerStepLogic <|-- SegmentationStepLogic
  SliceTrackerStepLogic <|-- ZFrameRegistrationStepLogic
  SliceTrackerStepLogic <|-- EvaluationStepLogic

  SliceTrackerStep <|-- SliceTrackerOverviewStep
  SliceTrackerStep <|-- SliceTrackerSegmentationStep
  SliceTrackerStep <|-- SliceTrackerZFrameRegistrationStep
  SliceTrackerStep <|-- SliceTrackerEvaluationStep

  OverViewStepLogic <.. SliceTrackerOverviewStep: uses
  SegmentationStepLogic <.. SliceTrackerSegmentationStep: uses
  ZFrameRegistrationStepLogic <.. SliceTrackerZFrameRegistrationStep: uses
  EvaluationStepLogic <.. SliceTrackerEvaluationStep: uses

  SliceTrackerStepLogic <.. SliceTrackerStep : uses

  SliceTrackerSession <.. SliceTrackerStep::session : uses
  SliceTrackerSession <.. SliceTrackerStepLogic::session: uses
  SliceTrackerSession <.. SliceTrackerTabWidget::session: uses
}



@enduml